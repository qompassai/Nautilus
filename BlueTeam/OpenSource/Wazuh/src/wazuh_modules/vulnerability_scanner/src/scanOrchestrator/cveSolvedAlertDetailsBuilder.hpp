/*
 * Wazuh Vulnerability scanner - Scan Orchestrator
 * Copyright (C) 2015, Wazuh Inc.
 * May 6, 2024.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _CVE_SOLVED_ALERT_DETAILS_BUILDER_HPP
#define _CVE_SOLVED_ALERT_DETAILS_BUILDER_HPP

#include "chainOfResponsability.hpp"
#include "databaseFeedManager.hpp"
#include "numericHelper.h"
#include "scanContext.hpp"

/**
 * @brief Class in charge of building the solved alert details.
 * @tparam TScanContext scan context type.
 */
template<typename TDatabaseFeedManager = DatabaseFeedManager, typename TScanContext = ScanContext>
class TCVESolvedAlertDetailsBuilder final : public AbstractHandler<std::shared_ptr<TScanContext>>
{
private:
    std::shared_ptr<TDatabaseFeedManager> m_databaseFeedManager;

public:
    // LCOV_EXCL_START
    /**
     * @brief Construct a new CVE Solved Alert Details Builder object
     *
     * @param databaseFeedManager Database feed manager instance.
     */
    explicit TCVESolvedAlertDetailsBuilder(std::shared_ptr<TDatabaseFeedManager>& databaseFeedManager)
        : m_databaseFeedManager(databaseFeedManager)
    {
    }

    /**
     * @brief Class destructor.
     *
     */
    ~TCVESolvedAlertDetailsBuilder() = default;
    // LCOV_EXCL_STOP

    /**
     * @brief Handles request and passes control to the next step of the chain.
     *
     * @param data Scan context.
     * @return std::shared_ptr<ScanContext> Abstract handler.
     */
    std::shared_ptr<TScanContext> handleRequest(std::shared_ptr<TScanContext> data) override
    {
        // We only generate alerts for real time events, aka dbsync deltas.
        if (data->messageType() == MessageType::Delta)
        {
            for (const auto& [cve, elements] : data->m_elements)
            {
                if (elements.empty())
                {
                    continue;
                }
                FlatbufferDataPair<NSVulnerabilityScanner::VulnerabilityDescription> returnData;
                m_databaseFeedManager->getVulnerabiltyDescriptiveInformation(cve, returnData);

                if (returnData.data)
                {
                    const std::string cvssVersion {returnData.data->scoreVersion()->str()};
                    const std::string scoreVersion {"cvss" + cvssVersion.substr(0, 1)};
                    nlohmann::json json;

                    json["vulnerability"]["status"] = "Solved";

                    std::string title {cve};
                    title.append(" affecting ");
                    title.append("one or many packages");
                    title.append(" was solved by ");
                    title.append(data->hotfixId());
                    json["vulnerability"]["title"] = title;
                    // This improves the description of the alert without creating another rule
                    json["vulnerability"]["package"]["name"] = "one or many packages";

                    json["vulnerability"]["cve"] = cve;
                    if (!cvssVersion.empty())
                    {
                        json["vulnerability"]["cvss"][scoreVersion]["base_score"] =
                            Utils::floatToDoubleRound(returnData.data->scoreBase(), 2);
                    }
                    json["vulnerability"]["enumeration"] = "CVE";
                    json["vulnerability"]["published"] = returnData.data->datePublished()->str();
                    json["vulnerability"]["reference"] = returnData.data->reference()->str();
                    json["vulnerability"]["severity"] = Utils::toSentenceCase(returnData.data->severity()->str());

                    // The title is different depending on the type of the alert.
                    json["vulnerability"]["type"] = "Packages";
                    json["vulnerability"]["updated"] = returnData.data->dateUpdated()->str();

                    data->m_alerts[cve] = std::move(json);
                }
            }
        }
        return AbstractHandler<std::shared_ptr<TScanContext>>::handleRequest(std::move(data));
    }
};

using CVESolvedAlertDetailsBuilder = TCVESolvedAlertDetailsBuilder<>;

#endif // _CVE_SOLVED_ALERT_DETAILS_BUILDER_HPP
