/*
 * Wazuh Vulnerability scanner - Scan Orchestrator
 * Copyright (C) 2015, Wazuh Inc.
 * March 11, 2024.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _BUILD_SINGLE_AGENT_INFO_CONTEXT_HPP
#define _BUILD_SINGLE_AGENT_INFO_CONTEXT_HPP

#include "chainOfResponsability.hpp"
#include "loggerHelper.h"
#include "scanContext.hpp"
#include "socketDBWrapper.hpp"
#include "vulnerabilityScanner.hpp"
#include "wazuhDBQueryBuilder.hpp"

/**
 * @brief Orchestrates queries over the global Wazuh system
 *
 * This class is responsible for managing the execution of queries within the global Wazuh environment.
 *
 * @tparam TScanContext scan context type.
 * @tparam TSocketDBWrapper socket database wrapper type
 */
template<typename TScanContext = ScanContext, typename TSocketDBWrapper = SocketDBWrapper>
class TBuildSingleAgentListInfoContext final : public AbstractHandler<std::shared_ptr<TScanContext>>
{

public:
    /**
     * @brief Construct a new global fetch object
     */
    explicit TBuildSingleAgentListInfoContext() = default;

    /**
     * @brief Handles request and passes control to the next step of the chain.
     *
     * @param data A shared pointer to the input data containing details of the query request.
     *
     * @return A shared pointer to a `TScanContext` object representing the query response.
     */
    std::shared_ptr<TScanContext> handleRequest(std::shared_ptr<TScanContext> data) override
    {
        nlohmann::json response;

        try
        {
            // Execute query
            TSocketDBWrapper::instance().query(
                WazuhDBQueryBuilder::builder()
                    .globalGetCommand(std::string("agent-info ") + data->agentId().data())
                    .build(),
                response);
        }
        catch (const SocketDbWrapperException& e)
        {
            throw WdbDataException(e.what(), data->agentId().data());
        }
        catch (std::exception& e)
        {
            logError(WM_VULNSCAN_LOGTAG,
                     "Unable to retrieve agent-info (agent %s). Reason: %s.",
                     data->agentId().data(),
                     e.what());
            return nullptr;
        }

        // Return elements should be one agent.
        if (response.size() == 1)
        {
            const auto& agent = response.front();
            data->m_agents.push_back({data->agentId().data(),
                                      agent.at("name"),
                                      Utils::leftTrim(agent.at("version"), "Wazuh "),
                                      agent.at("ip")});
        }
        return AbstractHandler<std::shared_ptr<TScanContext>>::handleRequest(std::move(data));
    }
};

using BuildSingleAgentListInfoContext = TBuildSingleAgentListInfoContext<>;

#endif // _BUILD_SINGLE_AGENT_INFO_CONTEXT_HPP
