/*
 * Wazuh Vulnerability scanner - Scan Orchestrator
 * Copyright (C) 2015, Wazuh Inc.
 * Nov 23, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _OS_DATA_CACHE_HPP
#define _OS_DATA_CACHE_HPP

#include "../policyManager/policyManager.hpp"
#include "cacheLRU.hpp"
#include "singleton.hpp"
#include "socketDBWrapper.hpp"
#include "wazuhDBQueryBuilder.hpp"
#include "wdbDataException.hpp"
#include <shared_mutex>
#include <string>

/**
 * @brief Os structure.
 */
struct Os final
{
    std::string hostName;       ///< Hostname of the agent.
    std::string architecture;   ///< Architecture of the agent.
    std::string name;           ///< Name of operating system.
    std::string codeName;       ///< Code name of the operating system.
    std::string majorVersion;   ///< Major version of the operating system.
    std::string minorVersion;   ///< Minor version of the operating system.
    std::string patch;          ///< Patch of the operating system.
    std::string build;          ///< Build of the operating system.
    std::string platform;       ///< Platform of the operating system.
    std::string version;        ///< Version of the operating system.
    std::string release;        ///< Release of the operating system.
    std::string displayVersion; ///< Display version of the operating system.
    std::string sysName;        ///< System name of the operating system.
    std::string kernelVersion;  ///< Version of the kernel operating system.
    std::string kernelRelease;  ///< Release of the kernel operating system.
    std::string cpeName;        ///< CPE name of the operating system.
};

/**
 * @brief OsDataCache class.
 */
template<typename TSocketDBWrapper = SocketDBWrapper>
class OsDataCache final : public Singleton<OsDataCache<>>
{
private:
    LRUCache<std::string, Os> m_osData {PolicyManager::instance().getOsdataLRUSize()};
    std::shared_mutex m_mutex;

    Os getOsDataFromWdb(const std::string& agentId)
    {
        nlohmann::json response;
        try
        {
            TSocketDBWrapper::instance().query(WazuhDBQueryBuilder::builder().agentGetOsInfoCommand(agentId).build(),
                                               response);
        }
        catch (const SocketDbWrapperException& e)
        {
            throw WdbDataException(e.what(), agentId);
        }
        catch (const std::exception& e)
        {
            throw std::runtime_error("Unable to retrieve OS data from Wazuh-DB (agent " + agentId +
                                     "). Reason: " + e.what());
        }

        if (response.empty())
        {
            throw WdbDataException("Empty OS data from Wazuh-DB.", agentId);
        }

        Os osData;
        const auto& data = response.at(0);

        osData.hostName = data.value("hostname", "");
        osData.architecture = data.value("architecture", "");
        osData.name = data.value("os_name", "");
        osData.codeName = data.value("os_codename", "");
        osData.majorVersion = data.value("os_major", "");
        osData.minorVersion = data.value("os_minor", "");
        osData.patch = data.value("os_patch", "");
        osData.build = data.value("os_build", "");
        osData.platform = data.value("os_platform", "");
        osData.version = data.value("os_version", "");
        osData.release = data.value("os_release", "");
        osData.displayVersion = data.value("os_display_version", "");
        osData.sysName = data.value("sysname", "");
        osData.kernelVersion = data.value("version", "");
        osData.kernelRelease = data.value("release", "");
        osData.cpeName = data.value("cpe_name", "");

        return osData;
    }

public:
    /**
     * @brief This method returns the os data.
     * @param agentId agent id.
     *
     * @return Os
     */
    Os getOsData(const std::string& agentId)
    {
        std::shared_lock lock(m_mutex);
        if (auto value = m_osData.getValue(agentId); value)
        {
            return *value;
        }

        // This may throw an exception that will be captured by the caller method.
        auto osData = getOsDataFromWdb(agentId);
        m_osData.insertKey(agentId, osData);
        return osData;
    }

    /**
     * @brief This method sets the os data.
     *
     * @param agentId agent id.
     * @param osData os data.
     */
    void setOsData(const std::string& agentId, const Os& osData)
    {
        std::scoped_lock lock(m_mutex);
        m_osData.insertKey(agentId, osData);
    }
};
#endif // _OS_DATA_CACHE_HPP
