' Copyright (C) 2015, Wazuh Inc.
' Created by Wazuh, Inc. <info@wazuh.com>.
' This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

@startuml vd-validation-of-configuration

actor "wazuh-manager" as manager
participant "VulnerabilityScannerFacade\n<<Facade>>" as vdFacade
participant "policyManager" as polManager
participant "stringHelper" as strHelp

manager -> vdFacade: start(logFunction, configuration)
vdFacade -> polManager: initialize(configuration)
note over polManager
    cJSON object
end note
polManager -> polManager: loadConfiguration(configuration)
polManager -> polManager: validateConfiguration()
alt Both keys present
note right
    m_configuration.contains("vulnerability-detection") && m_configuration.contains("indexer")
end note
polManager -> polManager: validateAndConfigureVulnerabilityDetection(getVulnerabilityDetection())
group validateAndConfigureVulnerabilityDetection
alt !contains enabled
polManager -> vdFacade: throw runtime_error
end
alt !contains index-status
polManager -> vdFacade: throw runtime_error
end
alt contains feed-update-interval
polManager -> strHelp: time = parseStrToTime(JSON["feed-update-interval"])
polManager -> polManager: m_feedUpdateTime = time
note right
    If the result is not negative
end note
end
alt contains offline-url
polManager -> strHelp: validUrl = startsWith(JSON["offline-url"], "file" || "http" || "https")
end
polManager -> strHelp: vdEnabled = parseStrToBool(JSON["enabled"])
polManager -> strHelp: idEnabled = parseStrToBool(JSON["index-status"])
polManager -> polManager: m_vulDetectEnabled = m_vulDetectEnabled && vdEnabled
polManager -> polManager: m_indexerEnabled = m_indexerEnabled && idEnabled
alt validUrl
polManager -> polManager: m_urlFeed = std::move(JSON["offline-url"])
end
end
polManager -> polManager: validateAndConfigureIndexer()
group validateAndConfigureIndexer
alt !contains enabled
polManager -> vdFacade: throw runtime_error
end
polManager -> strHelp: enabled = parseStrToBool(JSON["enabled"])
alt !(enabled && m_indexerEnabled)
polManager -> vdFacade: throw runtime_error
end
alt contains hosts
polManager -> polManager: m_hostList = JSON["hosts"].get<std::unordered_set<std::string>>()
note right
    With a set, we guarantee the filtering of the hosts.
end note
end
alt contains username
polManager -> polManager: m_username = std::move(JSON["username"])
end
alt contains password
polManager -> polManager: m_password = std::move(JSON["password"])
end
alt contains ssl and certificate_authorities
polManager -> polManager: m_caList = JSON["ssl"]["certificate_authorities"].get<std::unordered_set<std::string>>()
polManager -> polManager: m_caList = std::move(JSON["ssl"]["certificate"])
polManager -> polManager: m_caList = std::move(JSON["ssl"]["key"])
end
polManager --> vdFacade: return success
vdFacade --> manager: return success
end
else !Both keys present
polManager -> vdFacade: throw runtime_error
end
@enduml
