'''
copyright: Copyright (C) 2015-2024, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

components:
    - vulnerability_detector

suite: feeds

targets:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Focal
    - Ubuntu Bionic

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html

tags:
    - vulnerability_detector
    - cpe_helper
'''
import pytest
from pathlib import Path

from wazuh_testing import FEEDS_PATH
from wazuh_testing.constants.daemons import ANALYSISD_DAEMON, MODULES_DAEMON, SYSCHECK_DAEMON
from wazuh_testing.constants.paths.logs import WAZUH_LOG_PATH
from wazuh_testing.utils.configuration import (load_configuration_template, get_test_cases_data,
                                               update_configuration_template)
from wazuh_testing.utils.db_queries import agent_db
from wazuh_testing.utils.callbacks import generate_callback
from wazuh_testing.tools.monitors.file_monitor import FileMonitor
from wazuh_testing.modules.modulesd.vulnerability_detector import patterns as cb
from wazuh_testing.modules.modulesd.configuration import MODULESD_DEBUG
from wazuh_testing.modules.monitord.configuration import MONITORD_ROTATE_LOG
from wazuh_testing.modules.modulesd.vulnerability_detector import CUSTOM_NVD_FEED, CUSTOM_CPE_HELPER, CUSTOM_MSU_JSON_FEED
from wazuh_testing.utils.mocking import VULNERABLE_PACKAGES
from . import (TEST_CASES_PATH, CONFIGURATIONS_PATH, custom_nvd_json_feed_path,
               custom_msu_feed_path)


pytest.skip("The tests will be deprecated, they test the old Vulnerability Detector.", allow_module_level=True)

pytestmark = [pytest.mark.server]
local_internal_options = {MODULESD_DEBUG: '2', MONITORD_ROTATE_LOG: '0'}
daemons_handler_configuration = {'daemons': [ANALYSISD_DAEMON, MODULES_DAEMON, SYSCHECK_DAEMON]}

# Configuration and cases data
configurations_path = Path(CONFIGURATIONS_PATH, 'configuration_cpe_indexing.yaml')
t1_cases_path = Path(TEST_CASES_PATH, 'cases_cpe_indexing_packages.yaml')
t2_cases_path = Path(TEST_CASES_PATH, 'cases_cpe_indexing_system.yaml')

# CPE indexing packages test configurations (t1)
t1_configuration_parameters, t1_configuration_metadata, t1_test_case_ids = get_test_cases_data(t1_cases_path)
t1_configurations = load_configuration_template(configurations_path, t1_configuration_parameters,
                                                t1_configuration_metadata)
t1_systems = [metadata['system'] for metadata in t1_configuration_metadata]

# CPE indexing system test configurations (t2)
t2_configuration_parameters, t2_configuration_metadata, t2_test_case_ids = get_test_cases_data(t2_cases_path)
t2_configurations = load_configuration_template(configurations_path, t2_configuration_parameters,
                                                t2_configuration_metadata)
t2_systems = [metadata['system'] for metadata in t2_configuration_metadata]

# Set offline custom feeds configuration
t1_configurations = update_configuration_template(t1_configurations, ['CUSTOM_NVD_JSON_PATH'],
                                                  [custom_nvd_json_feed_path])
t2_configurations = update_configuration_template(t2_configurations, ['CUSTOM_NVD_JSON_PATH', 'CUSTOM_MSU_JSON_PATH'],
                                                  [custom_nvd_json_feed_path, custom_msu_feed_path])


@pytest.mark.tier(level=2)
@pytest.mark.parametrize('test_configuration, test_metadata, agent_system',
                         zip(t1_configurations, t1_configuration_metadata, t1_systems), ids=t1_test_case_ids)
def test_cpe_indexing_packages(test_configuration, test_metadata, agent_system, set_wazuh_configuration,
                               configure_local_internal_options, truncate_monitored_files, clean_cve_tables,
                               prepare_scan_with_cpe_helper, daemons_handler):
    '''
    description: Check that the CPE helper info related to the packages data is indexed.


    test_phases:
        - setup:
            - Set a custom Wazuh configuration, with custom feeds.
            - Mock an agent with Windows system and vulnerable packages.
            - Copy a custom CPE helper.
            - Truncate wazuh logs.
            - Restart wazuh-modulesd daemon to apply configuration changes.
        - test:
            - Check in log that the CPE package info was indexed.
        - teardown:
            - Truncate wazuh logs.
            - Restore initial configuration, both ossec.conf and local_internal_options.conf.
            - Restore the original cpe_helper.json

    wazuh_min_version: 4.3.0

    tier: 2

    parameters:
        - test_configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - test_metadata:
            type: dict
            brief: Wazuh configuration metadata.
        - agent_system:
            type: str
            brief: System to set to the mocked agent.
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - configure_local_internal_options:
            type: fixture
            brief: Set local_internal_options configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables:
            type: fixture
            brief: Clean all CVE tables.
        - prepare_scan_with_cpe_helper:
            type: fixture
            brief: Setup the initial test state.
        - daemons_handler:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - Check that the log that the indexing of the information has been carried out correctly is displayed.

    input_description:
        - The `cpe_indexing_packages.yaml` file provides the module configuration for this test.
        - The `cases_cpe_indexing_packages.yaml` file provides the test cases.

    expected_output:
        - r"The CPE .*a:{package_vendor}:{package_name}.* from the agent '{agent_id}' was indexed"
    '''
    file_monitor = FileMonitor(WAZUH_LOG_PATH)
    for package in VULNERABLE_PACKAGES:
        file_monitor.start(callback=generate_callback(regex=cb.CPE_PACKAGE_INDEXED,
                                                      replacement={'package_name': package['name'],
                                                                   'package_vendor': package['vendor'],
                                                                   'agent_id': prepare_scan_with_cpe_helper}))
        assert file_monitor.callback_result is not None, cb.ERR_MSG_PACKAGE_NOT_INDEXED


@pytest.mark.tier(level=2)
@pytest.mark.parametrize('test_configuration, test_metadata, agent_system',
                         zip(t2_configurations, t2_configuration_metadata, t2_systems), ids=t2_test_case_ids)
def test_cpe_indexing_system(test_configuration, test_metadata, agent_system, set_wazuh_configuration,
                             configure_local_internal_options, truncate_monitored_files, clean_cve_tables,
                             prepare_scan_with_cpe_helper, daemons_handler):
    '''
    description: Check that the CPE helper info related to the system data is indexed. Tested for each Windows version.

    test_phases:
        - setup:
            - Set a custom Wazuh configuration, with custom feeds.
            - Mock an agent with Windows system and vulnerable packages.
            - Copy a custom CPE helper.
            - Truncate wazuh logs.
            - Restart wazuh-modulesd daemon to apply configuration changes.
        - test:
            - Check in log that the CPE system info was indexed.
        - teardown:
            - Truncate wazuh logs.
            - Restore initial configuration, both ossec.conf and local_internal_options.conf.
            - Restore the original cpe_helper.json

    wazuh_min_version: 4.3.0

    tier: 2

    parameters:
        - test_configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - test_metadata:
            type: dict
            brief: Wazuh configuration metadata.
        - agent_system:
            type: str
            brief: System to set to the mocked agent.
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - configure_local_internal_options:
            type: fixture
            brief: Set local_internal_options configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables:
            type: fixture
            brief: Clean all CVE tables.
        - prepare_scan_with_cpe_helper:
            type: fixture
            brief: Setup the initial test state.
        - daemons_handler:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - Check that the log that the indexing of the information has been carried out correctly is displayed.

    input_description:
        - The `cpe_indexing_system.yaml` file provides the module configuration for this test.
        - The `cases_cpe_indexing_system.yaml` file provides the test cases.

    expected_output:
        - r"The CPE .*o:.*{index_system_name}.* from the agent '{agent_id}' was indexed"
    '''
    file_monitor = FileMonitor(WAZUH_LOG_PATH)

    file_monitor.start(callback=generate_callback(regex=cb.PACKAGE_INDEXED,
                                                  replacement={'index_system_name': test_metadata['index_name'],
                                                               'agent_id': prepare_scan_with_cpe_helper}))
    assert file_monitor.callback_result is not None, cb.ERR_MSG_SYSTEM_NOT_INDEXED
