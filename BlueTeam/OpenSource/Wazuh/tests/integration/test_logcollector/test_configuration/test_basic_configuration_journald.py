'''
copyright: Copyright (C) 2015-2024, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: The 'wazuh-logcollector' daemon monitors configured files and commands for new log messages.
       Specifically, these tests will check if the Wazuh component (agent or manager) starts when
       the 'localfile' with 'journal' as 'log_format' is set in the configuration, and the Wazuh API returns the 
       correct values for the configured 'localfile' section.
       Log data collection is the real-time process of making sense out of the records generated by
       servers or devices. This component can receive logs through text files or Windows event logs.
       It can also directly receive logs via remote syslog which is useful for firewalls and
       other such devices.

tier: 0

modules:
    - logcollector

components:
    - agent

daemons:
    - wazuh-logcollector
    - wazuh-apid

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - CentOS 8
    - Debian Buster
    - Red Hat 8
    - Ubuntu Focal
    - Ubuntu Bionic

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/log-data-collection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/localfile.html

tags:
    - logcollector
'''


import pytest

from pathlib import Path

from wazuh_testing.modules.logcollector import utils
from wazuh_testing.modules.logcollector import configuration as logcollector_configuration
from wazuh_testing.utils import configuration

from . import TEST_CASES_PATH
from utils import build_tc_config, assert_list_logs


LOG_COLLECTOR_GLOBAL_TIMEOUT = 40

# Marks
pytestmark = [pytest.mark.agent, pytest.mark.linux, pytest.mark.tier(level=0)]

# Configuration
journald_case_path = Path(TEST_CASES_PATH, 'cases_basic_configuration_journald.yaml')
test_configuration, test_metadata, test_cases_ids = configuration.get_test_cases_data(journald_case_path)
test_configuration = build_tc_config(test_configuration)

daemon_debug = logcollector_configuration.LOGCOLLECTOR_DEBUG

# Test daemons to restart.
daemons_handler_configuration = {'all_daemons': True}

local_internal_options = {daemon_debug: '1'}


# Test function.
@pytest.mark.parametrize('test_configuration, test_metadata', zip(test_configuration, test_metadata), ids=test_cases_ids)
def test_configuration_location(test_configuration, test_metadata, truncate_monitored_files, configure_local_internal_options,
                                remove_all_localfiles_wazuh_config, set_wazuh_configuration, daemons_handler, wait_for_logcollector_start):
    '''
    description: Check if the 'wazuh-logcollector' daemon starts properly when the 'journald' tag is used as log_format.
                 For this purpose, the test will configure the logcollector to monitor a 'journald'.
                 Finally, the test will verify that the Wazuh component is started by checking its process, and the Wazuh API returns the correct values
                 for the 'localfile' section.

    wazuh_min_version: 4.9.0

    parameters:
        - test_configuration:
            type: data
            brief: Configuration used in the test.
        - test_metadata:
            type: data
            brief: Configuration cases.
        - truncate_monitored_files:
            type: fixture
            brief: Reset the 'ossec.log' file and start a new monitor.
        - configure_local_internal_options:
            type: fixture
            brief: Configure the 'local_internal_options' section in the 'internal_options.conf' file.
        - remove_all_localfiles_wazuh_config:
            type: fixture
            brief: Remove all 'localfile' sections from the Wazuh configuration.
        - set_wazuh_configuration:
            type: fixture
            brief: Configure a custom environment for testing.
        - daemons_handler:
            type: fixture
            brief: Handler of Wazuh daemons.
        - wait_for_logcollector_start:
            type: fixture
            brief: Wait for the logcollector startup log.

    assertions:
        - Verify that the Wazuh component (agent or manager) can start when the 'jouranld' tag is used as log_format.
        - Verify that the Wazuh API returns the correct values for the 'localfile' section.
        - Verify the correct messages are generated in the log file in the correct order.

    input_description: A configuration file with journal block settings and the expected output for each test case.
                       Those include configuration settings for `journal` configuration in 'wazuh-logcollector'.

    expected_output:
        - Boolean values to indicate the state of the Wazuh component.
        - Did not receive the expected "ERROR: Could not EvtSubscribe() for ... which returned ..." event.

    tags:
        - invalid_settings
    '''

    # Logcollector always start, regardless of the configuration
    utils.check_logcollector_socket()

    # Check the messages in the log file
    if 'expected_logs' in test_metadata:
        assert_list_logs(test_metadata['expected_logs'])

    # Get the localfile list from the runtime configuration
    localfile_list = utils.get_localfile_runtime_configuration()

    # Regardless of configuration, there should never be more than one journal block.
    if 'journal_disabled' in test_metadata and test_metadata['journal_disabled']:
        assert len(localfile_list) == 0, f"Invalid configuration but journal block found."
        return
    else:
        assert len(localfile_list) == 1, f"Invalid configuration. More than one journal block found."

    # Validate the test configuration with the runtime configuration
    if 'expected_config' in test_metadata:
        assert localfile_list[0] == test_metadata['expected_config'], f"Invalid configuration. Expected: {test_metadata['expected_config']}. Found: {localfile_list[0]}"
