---
test_name: GET /mitre/metadata

stages:

  # GET /mitre/metadata
  - name: Request MITRE metadata
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/mitre/metadata"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - key: db_version
              value: !anystr
            - key: mitre_version
              value: !anystr
          total_affected_items: 2
          total_failed_items: 0
          failed_items: [ ]

---
test_name: GET /mitre/mitigations

stages:

  - name: Show one mitigation
    request: &general_mitigations_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/mitre/mitigations"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        limit: 1
        offset: 0
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: &mitigations_response
            - id: !anystr
              name: !anystr
              description: !anystr
              created_time: !anystr
              modified_time: !anystr
              mitre_version: !anystr
              deprecated: !anyint
              techniques: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Show one mitigation with offset = 1
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      save:
        $ext:
          function: tavern_utils:test_save_response_data_mitre
          extra_kwargs:
            fields:
              - id
              - name
              - description
              - created_time
              - modified_time
              - deprecated
              - techniques

  - name: Check that the offset is working properly, try to show two mitigations with offset = 0
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      json:
        error: 0
      verify_response_with:
        - function: tavern_utils:test_validate_mitre
          extra_kwargs:
            data: "{response_data}"
            index: 1

  - name: Show all mitigations without limit
    request:
      verify: False
      <<: *general_mitigations_request
    response:
      status_code: 200
      json:
        error: 0
        data:
          total_affected_items: !anyint

  - name: Try to get all mitigations with limit = 0
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        limit: 0
    response:
      status_code: 400

  - name: Get three specified mitigations (one of them does not exist in the database)
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        mitigation_ids:
          - "course-of-action--00d7d21b-69d6-4797-88a2-c86f3fc97651"
          - "course-of-action--03c0c586-50ed-45a7-95f4-f496d7eb5330"
          - "course-of-action--03c0c586-50ed-45a7-95f4-NOTEXIST"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *mitigations_response
              id: "course-of-action--00d7d21b-69d6-4797-88a2-c86f3fc97651"
            - <<: *mitigations_response
              id: "course-of-action--03c0c586-50ed-45a7-95f4-f496d7eb5330"
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Sort mitigations without limit
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        sort: -techniques
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "techniques"
            reverse: True
      status_code: 200

  - name: Sort mitigations by external_id
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        sort: -external_id
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "external_id"
            reverse: True
      status_code: 200

  - name: Show mitigations using valid select
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        select: 'techniques,deprecated,name'
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'id,name,deprecated,techniques' # required_fields={'id'}
      status_code: 200
      json:
        error: 0
        data:
          total_affected_items: !anyint
          failed_items: []
          total_failed_items: 0

  - name: Try to show mitigations using invalid select
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        select: 'noexists'
    response:
      status_code: 400
      json: &invalid_select
        error: 1724

  - name: Try to show mitigations using invalid select (one select is invalid)
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        select: 'name,noexists'
    response:
      status_code: 400
      json:
        <<: *invalid_select

  - name: Show mitigations using select and specifying a non-existent id in the mitigation_ids parameter
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        select: 'techniques'
        mitigation_ids: 'invalid'
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: []
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Search in mitigations
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        search: 'Use strong'
    response:
      status_code: 200
      json:
        error: 0
        data:
          failed_items: []
          total_affected_items: 3
          total_failed_items: 0
      verify_response_with:
        function: tavern_utils:test_validate_search
        extra_kwargs:
          search_param: 'Use strong'
      save:
        json:
          mitigation_id: data.affected_items[1].id

  - name: Search mitigations using offset and limit
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        search: 'Use strong'
        offset: 1
        limit: 1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: "{mitigation_id}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Try to show mitigations using an invalid parameter
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        noexist: nothing
    response:
      status_code: 400

  - name: Try to show mitigations using an invalid with an extra field
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        id: "course-of-action--7009ba4d-83d4-4851-9fbb-e09e28497765"
        noexist: True
    response:
      status_code: 400

  - name: Filter mitigations using q parameter
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        q: "id=course-of-action--7009ba4d-83d4-4851-9fbb-e09e28497765"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *mitigations_response
              id: "course-of-action--7009ba4d-83d4-4851-9fbb-e09e28497765"
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Filter mitigations using q parameter (complex query)
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        q: "created_time=2020-10-19T14:57:58.771000Z"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *mitigations_response
              created_time: "2020-10-19T14:57:58.771000Z"
          failed_items: [ ]
          total_affected_items: 1
          total_failed_items: 0

  - name: Filter mitigations using q parameter (complex query)
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        q: "created_time<2020-10-19T14:57:59;created_time>2020-10-18"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *mitigations_response
              created_time: "2020-10-19T14:57:58.771000Z"
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Get distinct mitre mitigations
    request:
      verify: False
      <<: *general_mitigations_request
      params:
        distinct: true
    response:
      status_code: 200
      verify_response_with:
        function: tavern_utils:test_distinct_key

---
test_name: GET /mitre/references

stages:

  - name: Show one reference
    request: &general_references_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/mitre/references"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        limit: 1
        offset: 0
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: &references_response
            - id: !anystr
              source: !anystr
              url: !anystr
              type: !anystr
              # description or external_id
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Show one reference with offset = 1
    request:
      verify: False
      <<: *general_references_request
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      save:
        $ext:
          function: tavern_utils:test_save_response_data_mitre
          extra_kwargs:
            fields:
              - id
              - source
              - url
              - type

  - name: Check that the offset is working properly, try to show two references with offset = 0
    request:
      verify: False
      <<: *general_references_request
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      json:
        error: 0
      verify_response_with:
        - function: tavern_utils:test_validate_mitre
          extra_kwargs:
            data: "{response_data}"
            index: 1

  - name: Show all references without limit
    request:
      verify: False
      <<: *general_references_request
    response:
      status_code: 200
      json:
        error: 0
        data:
          total_affected_items: !anyint

  - name: Try to get all references with limit = 0
    request:
      verify: False
      <<: *general_references_request
      params:
        limit: 0
    response:
      status_code: 400

  - name: Get three specified references (one of them does not exist in the database)
    request:
      verify: False
      <<: *general_references_request
      params:
        reference_ids:
          - "attack-pattern--0042a9f5-f053-4769-b3ef-9ad018dfa298"
          - "attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9"
          - "attack-pattern--005a06c6-14bf-4118-afa0-NOTEXIST"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *references_response
              id: "attack-pattern--0042a9f5-f053-4769-b3ef-9ad018dfa298"
            - <<: *references_response
              id: "attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Sort references without limit
    request:
      verify: False
      <<: *general_references_request
      params:
        sort: source
        limit: 3
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "source"
      status_code: 200

  - name: Show references using valid select
    request:
      verify: False
      <<: *general_references_request
      params:
        select: 'url,source,type'
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'url,source,type' # required_fields={'id'}
      status_code: 200
      json:
        error: 0
        data:
          total_affected_items: !anyint
          failed_items: []
          total_failed_items: 0

  - name: Try to show references using invalid select
    request:
      verify: False
      <<: *general_references_request
      params:
        select: 'noexists'
    response:
      status_code: 400
      json:
        <<: *invalid_select

  - name: Try to show references using invalid select (one select is invalid)
    request:
      verify: False
      <<: *general_references_request
      params:
        select: 'source,noexists'
    response:
      status_code: 400
      json:
        <<: *invalid_select

  - name: Show references using select and specifying a non-existent id in the reference_ids parameter
    request:
      verify: False
      <<: *general_references_request
      params:
        select: 'url'
        reference_ids: 'invalid'
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: []
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Search in references
    request:
      verify: False
      <<: *general_references_request
      params:
        search: 'TechNet RPC'
    response:
      status_code: 200
      json:
        error: 0
        data:
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0
      verify_response_with:
        function: tavern_utils:test_validate_search
        extra_kwargs:
          search_param: 'TechNet RPC'
      save:
        json:
          reference_id: data.affected_items[1].id

  - name: Search references using offset and limit
    request:
      verify: False
      <<: *general_references_request
      params:
        search: 'TechNet RPC'
        offset: 1
        limit: 1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: "{reference_id}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Try to show references using an invalid parameter
    request:
      verify: False
      <<: *general_references_request
      params:
        noexist: nothing
    response:
      status_code: 400

  - name: Try to show references using an invalid with an extra field
    request:
      verify: False
      <<: *general_references_request
      params:
        id: "attack-pattern--01a5a209-b94c-450b-b7f9-946497d91055"
        noexist: True
    response:
      status_code: 400

  - name: Filter references using q parameter
    request:
      verify: False
      <<: *general_references_request
      params:
        q: "id=attack-pattern--01a5a209-b94c-450b-b7f9-946497d91055"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *references_response
              id: "attack-pattern--01a5a209-b94c-450b-b7f9-946497d91055"
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Filter references using q parameter (complex query)
    request:
      verify: False
      <<: *general_references_request
      params:
        q: "source~Wikipedia;type!=technique;type!=mitigation"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *references_response
              source: "Wikipedia Ifconfig"
              type: "software"
            - <<: *references_response
              source: "Wikipedia pwdump"
              type: "software"
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

---
test_name: GET /mitre/tactics

stages:

  - name: Show one tactic
    request: &general_tactics_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/mitre/tactics"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        limit: 1
        offset: 0
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: &tactics_response
            - name: !anystr
              short_name: !anystr
              description: !anystr
              created_time: !anystr
              modified_time: !anystr
              id: !anystr
              techniques: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Show one tactic with offset = 1
    request:
      verify: False
      <<: *general_tactics_request
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      save:
        $ext:
          function: tavern_utils:test_save_response_data_mitre
          extra_kwargs:
            fields:
              - id
              - name
              - short_name
              - description
              - created_time
              - modified_time
              - techniques

  - name: Check that the offset is working properly, try to show two tactics with offset = 0
    request:
      verify: False
      <<: *general_tactics_request
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      json:
        error: 0
      verify_response_with:
        - function: tavern_utils:test_validate_mitre
          extra_kwargs:
            data: "{response_data}"
            index: 1

  - name: Show all tactics without limit
    request:
      verify: False
      <<: *general_tactics_request
    response:
      status_code: 200
      json:
        error: 0
        data:
          total_affected_items: !anyint

  - name: Try to get all tactics with limit = 0
    request:
      verify: False
      <<: *general_tactics_request
      params:
        limit: 0
    response:
      status_code: 400

  - name: Get three specified tactics (one of them does not exist in the database)
    request:
      verify: False
      <<: *general_tactics_request
      params:
        tactic_ids:
          - "x-mitre-tactic--2558fd61-8c75-4730-94c4-11926db2a263"
          - "x-mitre-tactic--4ca45d45-df4d-4613-8980-bac22d278fa5"
          - "x-mitre-tactic--4ca45d45-df4d-4613-8980-NOTEXIST"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *tactics_response
              id: "x-mitre-tactic--2558fd61-8c75-4730-94c4-11926db2a263"
            - <<: *tactics_response
              id: "x-mitre-tactic--4ca45d45-df4d-4613-8980-bac22d278fa5"
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Sort tactics without limit
    request:
      verify: False
      <<: *general_tactics_request
      params:
        sort: -techniques
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "techniques"
            reverse: True
      status_code: 200

  - name: Sort tactics by external_id
    request:
      verify: False
      <<: *general_tactics_request
      params:
        sort: -external_id
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "external_id"
            reverse: True
      status_code: 200

  - name: Try to show tactics using valid select
    request:
      verify: False
      <<: *general_tactics_request
      params:
        select: 'techniques,short_name,name'
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'id,name,short_name,techniques' # required_fields={'id'}
      status_code: 200
      json:
        error: 0
        data:
          total_affected_items: !anyint
          failed_items: []
          total_failed_items: 0

  - name: Show tactics using invalid select
    request:
      verify: False
      <<: *general_tactics_request
      params:
        select: 'noexists'
    response:
      status_code: 400
      json:
        <<: *invalid_select

  - name: Try to show tactics using invalid select (one select is invalid)
    request:
      verify: False
      <<: *general_tactics_request
      params:
        select: 'name,noexists'
    response:
      status_code: 400
      json:
        <<: *invalid_select

  - name: Show tactics using select and specifying a non-existent id in the tactic_ids parameter
    request:
      verify: False
      <<: *general_tactics_request
      params:
        select: 'techniques'
        tactic_ids: 'invalid'
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: []
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Search in tactics
    request:
      verify: False
      <<: *general_tactics_request
      params:
        search: 'Persistence'
    response:
      status_code: 200
      json:
        error: 0
        data:
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0
      verify_response_with:
        function: tavern_utils:test_validate_search
        extra_kwargs:
          search_param: 'Persistence'
      save:
        json:
          tactic_id: data.affected_items[1].id

  - name: Search tactics using offset and limit
    request:
      verify: False
      <<: *general_tactics_request
      params:
        search: 'Persistence'
        offset: 1
        limit: 1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: "{tactic_id}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Try to show tactics using an invalid parameter
    request:
      verify: False
      <<: *general_tactics_request
      params:
        noexist: nothing
    response:
      status_code: 400

  - name: Try to show tactics using an invalid with an extra field
    request:
      verify: False
      <<: *general_tactics_request
      params:
        id: "x-mitre-tactic--2558fd61-8c75-4730-94c4-11926db2a263"
        noexist: True
    response:
      status_code: 400

  - name: Filter tactics using q parameter
    request:
      verify: False
      <<: *general_tactics_request
      params:
        q: "id=x-mitre-tactic--2558fd61-8c75-4730-94c4-11926db2a263"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *tactics_response
              id: "x-mitre-tactic--2558fd61-8c75-4730-94c4-11926db2a263"
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Filter tactics using q parameter (complex query)
    request:
      verify: False
      <<: *general_tactics_request
      params:
        q: "created_time<2019-03-15 18:42:08;created_time>2019-03-12 18:42:06"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *tactics_response
              created_time: "2019-03-14T18:44:44.639000Z"
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Get distinct mitre tactics
    request:
      verify: False
      <<: *general_tactics_request
      params:
        distinct: true
    response:
      status_code: 200
      verify_response_with:
        function: tavern_utils:test_distinct_key

---
test_name: GET /mitre/techniques

stages:

  - name: Show one technique
    request: &general_techniques_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/mitre/techniques"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        limit: 1
        offset: 0
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: &techniques_response
            - subtechnique_of: !anything
              deprecated: !anyint
              remote_support: !anyint
              name: !anystr
              mitre_version: !anystr
              id: !anystr
              mitre_detection: !anystr
              description: !anystr
              modified_time: !anystr
              network_requirements: !anyint
              created_time: !anystr
              tactics: !anything
              mitigations: !anything
              software: !anything
              groups: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Show one technique with offset = 1
    request:
      verify: False
      <<: *general_techniques_request
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      save:
        $ext:
          function: tavern_utils:test_save_response_data_mitre
          extra_kwargs:
            fields:
              - id
              - name
              - created_time
              - deprecated
              - remote_support
              - tactics
              - groups
              - mitigations
              - software

  - name: Check that the offset is working properly, try to show two techniques with offset = 0
    request:
      verify: False
      <<: *general_techniques_request
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      json:
        error: 0
      verify_response_with:
        - function: tavern_utils:test_validate_mitre
          extra_kwargs:
            data: "{response_data}"
            index: 1

  - name: Show all techniques without limit
    request:
      verify: False
      <<: *general_techniques_request
    response:
      status_code: 200
      json:
        error: 0
        data:
          total_affected_items: !anyint

  - name: Try to get all techniques with limit = 0
    request:
      verify: False
      <<: *general_techniques_request
      params:
        limit: 0
    response:
      status_code: 400

  - name: Get three specified techniques (one of them does not exist in the database)
    request:
      verify: False
      <<: *general_techniques_request
      params:
        technique_ids:
          - "attack-pattern--840a987a-99bd-4a80-a5c9-0cb2baa6cade"
          - "attack-pattern--db8f5003-3b20-48f0-9b76-123e44208120"
          - "attack-pattern--db8f5003-3b20-48f0-9b76-NOTEXIST"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *techniques_response
              id: "attack-pattern--840a987a-99bd-4a80-a5c9-0cb2baa6cade"
            - <<: *techniques_response
              id: "attack-pattern--db8f5003-3b20-48f0-9b76-123e44208120"
          failed_items: [ ]
          total_affected_items: 2
          total_failed_items: 0

  - name: Sort techniques without limit
    request:
      verify: False
      <<: *general_techniques_request
      params:
        sort: -mitigations
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "mitigations"
            reverse: True
      status_code: 200

  - name: Sort techniques by external_id
    request:
      verify: False
      <<: *general_techniques_request
      params:
        sort: -external_id
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "external_id"
            reverse: True
      status_code: 200

  - name: Try to show techniques using valid select
    request:
      verify: False
      <<: *general_techniques_request
      params:
        select: 'groups,deprecated,name'
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'id,groups,deprecated,name' # required_fields={'id'}
      status_code: 200
      json:
        error: 0
        data:
          total_affected_items: !anyint
          failed_items: []
          total_failed_items: 0

  - name: Show techniques using invalid select
    request:
      verify: False
      <<: *general_techniques_request
      params:
        select: 'noexists'
    response:
      status_code: 400
      json:
        <<: *invalid_select

  - name: Tey to show techniques using invalid select (one select is invalid)
    request:
      verify: False
      <<: *general_techniques_request
      params:
        select: 'name,noexists'
    response:
      status_code: 400
      json:
        <<: *invalid_select

  - name: Show techniques using select and specifying a non-existent id in the technique_ids parameter
    request:
      verify: False
      <<: *general_techniques_request
      params:
        select: 'software'
        technique_ids: 'invalid'
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: []
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Search in techniques
    request:
      verify: False
      <<: *general_techniques_request
      params:
        search: 'Gather Victim Network Information'
    response:
      status_code: 200
      json:
        error: 0
        data:
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0
      verify_response_with:
        function: tavern_utils:test_validate_search
        extra_kwargs:
          search_param: 'Gather Victim Network Information'
      save:
        json:
          technique_id: data.affected_items[1].id

  - name: Search techniques using offset and limit
    request:
      verify: False
      <<: *general_techniques_request
      params:
        search: 'Gather Victim Network Information'
        offset: 1
        limit: 1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: "{technique_id}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Try to show techniques using an invalid parameter
    request:
      verify: False
      <<: *general_techniques_request
      params:
        noexist: nothing
    response:
      status_code: 400

  - name: Try to show techniques using an invalid with an extra field
    request:
      verify: False
      <<: *general_techniques_request
      params:
        id: "attack-pattern--db8f5003-3b20-48f0-9b76-123e44208120"
        noexist: True
    response:
      status_code: 400

  - name: Filter techniques using q parameter
    request:
      verify: False
      <<: *general_techniques_request
      params:
        q: "id=attack-pattern--db8f5003-3b20-48f0-9b76-123e44208120"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *techniques_response
              id: "attack-pattern--db8f5003-3b20-48f0-9b76-123e44208120"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Filter techniques using q parameter (complex query)
    request:
      verify: False
      <<: *general_techniques_request
      params:
        q: "created_time<2020-02-11 18:42:08;created_time>2020-02-11 18:42:06"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *techniques_response
              created_time: "2020-02-11T18:42:07.281000Z"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Get distinct mitre techniques
    request:
      verify: False
      <<: *general_techniques_request
      params:
        distinct: true
    response:
      status_code: 200
      verify_response_with:
        function: tavern_utils:test_distinct_key

---
test_name: GET /mitre/groups

stages:

  - name: Show one group
    request: &general_groups_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/mitre/groups"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        limit: 1
        offset: 0
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: &groups_response
            - mitre_version: !anystr
              deprecated: !anyint
              name: !anystr
              id: !anystr
              modified_time: !anystr
              created_time: !anystr
              description: !anystr
              software: !anything
              techniques: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Show one group with offset = 1
    request:
      verify: False
      <<: *general_groups_request
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      save:
        $ext:
          function: tavern_utils:test_save_response_data_mitre
          extra_kwargs:
            fields:
              - mitre_version
              - deprecated
              - name
              - id
              - modified_time
              - created_time
              - description
              - software
              - techniques

  - name: Check that the offset is working properly, show two groups with offset = 0
    request:
      verify: False
      <<: *general_groups_request
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      json:
        error: 0
      verify_response_with:
        - function: tavern_utils:test_validate_mitre
          extra_kwargs:
            data: "{response_data}"
            index: 1

  - name: Show all groups without limit
    request:
      verify: False
      <<: *general_groups_request
    response:
      status_code: 200
      json:
        error: 0
        data:
          total_affected_items: !anyint

  - name: Try to get all groups with limit = 0
    request:
      verify: False
      <<: *general_groups_request
      params:
        limit: 0
    response:
      status_code: 400

  - name: Get three specified groups (one of them does not exist in the database)
    request:
      verify: False
      <<: *general_groups_request
      params:
        group_ids:
          - "intrusion-set--00f67a77-86a4-4adf-be26-1a54fc713340"
          - "intrusion-set--025bdaa9-897d-4bad-afa6-013ba5734653"
          - "intrusion-set--03506554-5f37-4f8f-9ce4-999999999999"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *groups_response
              id: "intrusion-set--00f67a77-86a4-4adf-be26-1a54fc713340"
            - <<: *groups_response
              id: "intrusion-set--025bdaa9-897d-4bad-afa6-013ba5734653"
          failed_items: [ ]
          total_affected_items: 2
          total_failed_items: 0

  - name: Sort groups without limit
    request:
      verify: False
      <<: *general_groups_request
      params:
        sort: -software
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "software"
            reverse: True
      status_code: 200

  - name: Sort groups by external_id
    request:
      verify: False
      <<: *general_groups_request
      params:
        sort: -external_id
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "external_id"
            reverse: True
      status_code: 200

  - name: Show groups using valid select
    request:
      verify: False
      <<: *general_groups_request
      params:
        select: 'name,deprecated'
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'name,deprecated,id' # required_fields={'id'}
      status_code: 200
      json:
        error: 0
        data:
          total_affected_items: !anyint
          failed_items: []
          total_failed_items: 0

  - name: Try to show groups using invalid select
    request:
      verify: False
      <<: *general_groups_request
      params:
        select: 'noexists'
    response:
      status_code: 400
      json:
        <<: *invalid_select

  - name: Try to show groups using invalid select (one select is invalid)
    request:
      verify: False
      <<: *general_groups_request
      params:
        select: 'name,noexists'
    response:
      status_code: 400
      json:
        <<: *invalid_select

  - name: Show groups using select and specifying a non-existent id in the group_ids parameter
    request:
      verify: False
      <<: *general_groups_request
      params:
        select: 'software'
        group_ids: 'invalid'
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0

  - name: Search in groups
    request:
      verify: False
      <<: *general_groups_request
      params:
        search: "NEODYMIUM"
    response:
      status_code: 200
      json:
        error: 0
        data:
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0
      verify_response_with:
        function: tavern_utils:test_validate_search
        extra_kwargs:
          search_param: "NEODYMIUM"
      save:
        json:
          group_id: data.affected_items[1].id

  - name: Search groups using offset and limit
    request:
      verify: False
      <<: *general_groups_request
      params:
        search: "NEODYMIUM"
        offset: 1
        limit: 1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: "{group_id}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Try to show groups using an invalid parameter
    request:
      verify: False
      <<: *general_groups_request
      params:
        noexist: nothing
    response:
      status_code: 400

  - name: Try to show groups using an invalid id with an extra field
    request:
      verify: False
      <<: *general_groups_request
      params:
        id: "intrusion-set--00f67a77-86a4-4adf-be26-999999999999"
        noexist: True
    response:
      status_code: 400

  - name: Filter groups using q parameter
    request:
      verify: False
      <<: *general_groups_request
      params:
        q: "id=intrusion-set--00f67a77-86a4-4adf-be26-1a54fc713340"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *groups_response
              id: "intrusion-set--00f67a77-86a4-4adf-be26-1a54fc713340"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0
  
  - name: Filter groups using q parameter with special character
    request:
      verify: False
      <<: *general_groups_request
      params:
        q: "name=admin@338"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: "intrusion-set--16ade1aa-0ea1-4bb7-88cc-9079df2ae756"
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Filter groups using q parameter (complex query)
    request:
      verify: False
      <<: *general_groups_request
      params:
        q: "created_time<2019-01-29 21:28:00;created_time>2019-01-29 21:27:00"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *groups_response
              created_time: "2019-01-29T21:27:24.793000Z"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Get distinct mitre groups
    request:
      verify: False
      <<: *general_groups_request
      params:
        distinct: true
    response:
      status_code: 200
      verify_response_with:
        function: tavern_utils:test_distinct_key

---
test_name: GET /mitre/software

stages:

  - name: Show one software
    request: &general_software_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/mitre/software"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        limit: 1
        offset: 0
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: &software_response
            - mitre_version: !anystr
              deprecated: !anyint
              name: !anystr
              id: !anystr
              modified_time: !anystr
              created_time: !anystr
              description: !anystr
              groups: !anything
              techniques: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Show one software with offset = 1
    request:
      verify: False
      <<: *general_software_request
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      save:
        $ext:
          function: tavern_utils:test_save_response_data_mitre
          extra_kwargs:
            fields:
              - mitre_version
              - deprecated
              - name
              - id
              - modified_time
              - created_time
              - description
              - groups
              - techniques

  - name: Check that the offset is working properly, show two softwares with offset = 0
    request:
      verify: False
      <<: *general_software_request
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      json:
        error: 0
      verify_response_with:
        - function: tavern_utils:test_validate_mitre
          extra_kwargs:
            data: "{response_data}"
            index: 1

  - name: Show all softwares without limit
    request:
      verify: False
      <<: *general_software_request
    response:
      status_code: 200
      json:
        error: 0
        data:
          total_affected_items: !anyint

  - name: Try to get all softwares with limit = 0
    request:
      verify: False
      <<: *general_software_request
      params:
        limit: 0
    response:
      status_code: 400

  - name: Get three specified softwares (one of them does not exist in the database)
    request:
      verify: False
      <<: *general_software_request
      params:
        software_ids:
          - "malware--007b44b6-e4c5-480b-b5b9-56f2081b1b7b"
          - "malware--00806466-754d-44ea-ad6f-0caf59cb8556"
          - "malware--00806466-754d-44ea-ad6f-999999999999"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *software_response
              id: "malware--007b44b6-e4c5-480b-b5b9-56f2081b1b7b"
            - <<: *software_response
              id: "malware--00806466-754d-44ea-ad6f-0caf59cb8556"
          failed_items: [ ]
          total_affected_items: 2
          total_failed_items: 0

  - name: Sort softwares without limit
    request:
      verify: False
      <<: *general_software_request
      params:
        sort: -groups
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "groups"
            reverse: True
      status_code: 200

  - name: Sort softwares by external_id
    request:
      verify: False
      <<: *general_software_request
      params:
        sort: -external_id
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "external_id"
            reverse: True
      status_code: 200

  - name: Show softwares using valid select
    request:
      verify: False
      <<: *general_software_request
      params:
        select: 'name,deprecated'
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'name,deprecated,id' # required_fields={'id'}
      status_code: 200
      json:
        error: 0
        data:
          total_affected_items: !anyint
          failed_items: []
          total_failed_items: 0

  - name: Try to show softwares using invalid select
    request:
      verify: False
      <<: *general_software_request
      params:
        select: 'noexists'
    response:
      status_code: 400
      json:
        <<: *invalid_select

  - name: Try to show softwares using invalid select (one select is invalid)
    request:
      verify: False
      <<: *general_software_request
      params:
        select: 'name,noexists'
    response:
      status_code: 400
      json:
        <<: *invalid_select

  - name: Show softwares using select and specifying a non-existent id in the software_ids parameter
    request:
      verify: False
      <<: *general_software_request
      params:
        select: 'groups'
        software_ids: 'invalid'
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0

  - name: Search in softwares
    request:
      verify: False
      <<: *general_software_request
      params:
        search: "TrickBot"
    response:
      status_code: 200
      json:
        error: 0
        data:
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0
      verify_response_with:
        function: tavern_utils:test_validate_search
        extra_kwargs:
          search_param: "TrickBot"
      save:
        json:
          software_id: data.affected_items[1].id

  - name: Search softwares using offset and limit
    request:
      verify: False
      <<: *general_software_request
      params:
        search: "TrickBot"
        offset: 1
        limit: 1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: "{software_id}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Try to show softwares using an invalid parameter
    request:
      verify: False
      <<: *general_software_request
      params:
        noexist: nothing
    response:
      status_code: 400

  - name: Try to show softwares using an invalid id with an extra field
    request:
      verify: False
      <<: *general_software_request
      params:
        id: "malware--007b44b6-e4c5-480b-b5b9-999999999999"
        noexist: True
    response:
      status_code: 400

  - name: Filter softwares using q parameter
    request:
      verify: False
      <<: *general_software_request
      params:
        q: "id=malware--007b44b6-e4c5-480b-b5b9-56f2081b1b7b"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *software_response
              id: "malware--007b44b6-e4c5-480b-b5b9-56f2081b1b7b"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Filter softwares using q parameter (complex query)
    request:
      verify: False
      <<: *general_software_request
      params:
        q: "created_time<2017-05-31 21:32:41;created_time>2017-05-31 21:32:40"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - <<: *software_response
              created_time: "2017-05-31T21:32:40.801000Z"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Get distinct mitre software
    request:
      verify: False
      <<: *general_software_request
      params:
        distinct: true
    response:
      status_code: 200
      verify_response_with:
        function: tavern_utils:test_distinct_key
